language: cpp
compiler: gcc
python:
  - "3.5"
matrix:
  include:
  - env: CONFIGURE_OPTIONS='--enable-openmp'
  - env: CONFIGURE_OPTIONS='--enable-debug'
  allow_failures:
  - env: CONFIGURE_OPTIONS='' MPICH_CC=clang MPICH_CXX=clang++
    compiler: clang
  - env: CONFIGURE_OPTIONS='--enable-openmp' MPICH_CC=clang MPICH_CXX=clang++
    compiler: clang
  - env: CONFIGURE_OPTIONS='--enable-debug' MPICH_CC=clang MPICH_CXX=clang++
    compiler: clang
before_install:
  - sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
  - sudo apt-get update -qq
  - if [ "$CXX" = "g++" ]; then sudo apt-get install -qq g++-4.8; fi
  - if [ "$CXX" = "g++" ]; then export CXX="g++-4.8" CC="gcc-4.8" MPICH_CXX="g++-4.8" MPICH_CC="gcc-4.8"; fi
  - sudo apt-get install -y mpich2 libmpich2-dev
  - sudo apt-get install -y libfftw3-dev libnetcdf-dev libhdf5-serial-dev netcdf-bin hdf5-tools
  - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # Useful for debugging any issues with conda
  - conda info -a
  - conda create -q -n test-environment python=3.5 numpy scipy netcdf4
  - source activate test-environment

  # Make sure to use the system NetCDF/HDF5 libraries, or we end up
  # using the Conda libraries, which causes no end of headaches
  - export CONFIGURE_OPTIONS="--with-netcdf=/usr/bin/nc-config --with-hdf5=/usr/bin/h5cc $CONFIGURE_OPTIONS"
script:
  - ./.travis_script.sh
